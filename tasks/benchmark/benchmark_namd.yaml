- name: Set namd phoronix base directory  # specific for running phoronix as root  (become: true)
  set_fact:
    namd_test_folder: '/var/lib/phoronix-test-suite/installed-tests/pts/{{ namd_version }}'


- name: install phoronix namd-cuda
  command: "env DISPLAY=:0 ./phoronix-test-suite install {{ namd_version }} 2>&1"
  become: true
  args:
    chdir: "{{ phoronix_folder }}"
  register: namd_cuda_install_result
- set_fact:
    cleaned_namd_cuda_install_result: "{{ namd_cuda_install_result.stdout | regex_replace('\x1B\\[[0-9;]*[mK]', '') }}"
- name: write namd-cuda install logs
  delegate_to: localhost
  copy:
    content: "{{ cleaned_namd_cuda_install_result }}"
    dest: temp/namd_cuda_install_result.txt


- name: Check that NAMD f1atpase.zip downloaded successfully
  stat:
    path: "{{ namd_test_folder }}/f1atpase.zip"
  register: NAMD_f1atpase_exists

- assert:
    that:
      - "NAMD_f1atpase_exists.stat.exists"

# Two tasks-openstack-core below need to be done manually because somehow the Phoronix's NAMD installation through ansible
# is not working properly, although it works if we do SSH manually and *initiate* the phoronix NAMD installation manually


- name: Prepare directory for NAMD testcase f1atpase.zip
  ansible.builtin.file:
    path: "{{ namd_test_folder }}/f1atpase"
    state: directory



- name: Check if NAMD f1atpase.zip need to be unzipped manually
  stat:
    path: "{{ namd_test_folder }}/f1atpase/f1atpase.namd"
  register: f1atpase_extracted_folder

- name: Extract NAMD testcase f1atpase.zip  #
  unarchive:
    src: "{{ namd_test_folder }}/f1atpase.zip"
    dest: "{{ namd_test_folder }}"
    remote_src: yes
  when: "not f1atpase_extracted_folder.stat.exists"

- name: run namd benchmark
  async: 10000
  poll: 5
  become: true
  expect:
    timeout: 800
    command: "{{ prime_run }} env FORCE_TIMES_TO_RUN=5 DISPLAY=:0 {{ phoronix_test_suite }} benchmark namd-cuda 2>&1"
    responses:
      'Would you like to save these test results': 'n'
  register: namd_benchmark_result
- set_fact:
    cleaned_namd_benchmark_result: "{{ namd_benchmark_result.stdout | regex_replace('\x1B\\[[0-9;]*[mK]', '') }}"
- name: write namd benchmark logs
  delegate_to: localhost
  copy:
    content: "{{ cleaned_namd_benchmark_result }}"
    dest: temp/namd_benchmark_result.txt
