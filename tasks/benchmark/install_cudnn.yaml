- import_tasks: ./download_cudnn.yaml

# See: https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#installlinux-deb












# See https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#network-repo-installation-for-debian
- set_fact:
    cudnn_keyring_pkg_filename: "{{ base_path }}/cuda-keyring_1.1-1_all.deb"
    cudnn_signing_key_filename: "{{ base_path }}/cuda-archive-keyring.gpg"
    cudnn_pin_filename: "{{ base_path }}/cuda-{{ distro }}.pin"
    distro_arch_cudnn: "{{ distro }}/{{ arch }}"


- name: install gcc
  apt:
    update_cache: yes
    name:
      - gcc
- name: Verify the System has the Correct Kernel Headers and Development Packages Installed
  command: "uname -r"
  register: uname_r
- name: install linux headers
  apt:
    update_cache: yes
    name:
      - "linux-headers-{{ uname_r.stdout }}"

- name: remove outdated signing key
  command: "apt-key del 7fa2af80"


#- name: Download cudnn gpg signature (Enroll the new signing key manually)

#  ansible.builtin.get_url:
#    url: "https://developer.download.nvidia.com/compute/cuda/repos/{{ distro_arch_cudnn }}/cuda-archive-keyring.gpg"
#    dest: "{{ cudnn_signing_key_filename }}"
#    mode: '0700'
#- name: Copy gpg signature (Enroll the new signing key manually)
#  copy:
#    src: "{{ cudnn_signing_key_filename }}"
#    dest: "/usr/share/keyrings/cuda-archive-keyring.gpg"
#    remote_src: yes
#    mode: '0777'
- name: Enable the network repository
  command: "echo \"deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/{{ distro }}/{{ arch }}/ /\" | sudo tee /etc/apt/sources.list.d/cuda-{{ distro }}-{{ arch }}.list"
#- name: Download pin file (Add pin file to prioritize CUDA repository)
#  ansible.builtin.get_url:
#    url: "https://developer.download.nvidia.com/compute/cuda/repos/{{ distro_arch_cudnn }}/cuda-{{ distro }}.pin"
#    dest: "{{ cudnn_pin_filename }}"
#- name: Copy pin file (Add pin file to prioritize CUDA repository)
#  copy:
#    src: "{{ cudnn_pin_filename }}"
#    dest: "/etc/apt/preferences.d/cuda-repository-pin-600"
#    remote_src: yes
#- name: Download pin file (Add pin file to prioritize CUDA repository)
#  command: "ls -1 /var/cuda-repo-{{ distro }}-*-*-local/cuda-*-keyring.gpg | xargs -L1 -I{} cp {} {}.old"

- name: Download cudnn-keyrings package
  ansible.builtin.get_url:
    url: "https://developer.download.nvidia.com/compute/cuda/repos/{{ distro_arch_cudnn }}/cuda-keyring_1.1-1_all.deb"
    dest: "{{ cudnn_keyring_pkg_filename }}"
    mode: '0777'
- command: "dpkg -i {{ cudnn_keyring_pkg_filename }}"
- command: "apt-get update"
#    dest: "/usr/share/keyrings/"


- name: install gcc
  apt:
    update_cache: yes
    name:
      - libcudnn8=8.9.7.29-1+cuda12.2
      - libcudnn8-dev=8.9.7.29-1+cuda12.2
      - libcudnn8-samples=8.9.7.29-1+cuda12.2



- apt:
    update_cache: yes
    name:
      - libcublas-12-0


# See: https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html
#- set_fact:
#    miniconda_isntaller_file: "{{ base_path }}/Miniconda3-latest-Linux-x86_64.sh"
#    miniconda_install_path: "{{ base_path }}/miniconda3"
#    cudnn_version: "7.6.5"
#    cuda_version: "cuda10.1_0"
#- name: Download miniconda installer  # miniconda version during development: 23.11.0-1
#  ansible.builtin.get_url:
#    url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
#    dest: "{{ miniconda_isntaller_file }}"
#    mode: '0777'
#
#- name: Install miniconda
#  command: "{{ miniconda_isntaller_file }} -b -p \"{{ miniconda_install_path }}\""
#  register: install_miniconda_output
#  args:
#    creates: "{{ miniconda_install_path }}"
#- debug:
#    msg: "{{ install_miniconda_output.stdout }}"
#
#- name: install zlib
#  apt:
#    update_cache: yes
#    name:
#      - zlib1g  # ubuntu
#
#- name: additional cudnn-installation helper constants
#  set_fact:
#    miniconda_cmd: "{{ miniconda_install_path }}/bin/conda"
#    cudnn_installation_path: "{{ miniconda_install_path }}/pkgs/cudnn-{{ cudnn_version }}-{{ cuda_version }}"
#    cudnn_zip_file: "{{ base_path }}/cudnn-local-repo-ubuntu2004-8.9.7.29_1.0-1_amd64.deb"
#
#
#- name: Install cudnn
#  command: "{{ miniconda_cmd }} install -c anaconda cudnn={{ cudnn_version }}={{ cuda_version }} -y"
#  register: install_cudnn_output
#- debug:
#    msg: "{{ install_cudnn_output }}"
#- name: Create folder for cudnn-global
#  ansible.builtin.file:
#    path: "/usr/local/cuda"
#    state: directory
#
#- name: Copy cudnn to be globally-available - include
#  copy:
#    src: "{{ cudnn_installation_path }}/include/"
#    dest: "/usr/local/cuda/include/"
#    remote_src: yes
#    mode: '0777'
#- name: Copy cudnn to be globally-available - lib
#  copy:
#    src: "{{ cudnn_installation_path }}/lib/"
#    dest: "/usr/local/cuda/lib64/"
#    remote_src: yes
#    mode: '0777'


