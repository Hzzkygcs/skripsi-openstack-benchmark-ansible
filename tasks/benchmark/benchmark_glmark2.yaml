- block:
    # update: use xvfb instead of xorg. Xorg seems to have FPS cap which is not good for GPU benchmarking
    - import_tasks: ./install_xorg_headless_virtual_display.yaml
  rescue:
    - debug:
        msg: "Error install_xorg_headless_virtual_display.yaml, trying to purge nvidia-* and reboot"
    - name: "purging nvidia-*"
      command: "sudo apt-get remove --purge nvidia-* -y"
    - name: "sudo apt autoremove -y"
      command: "sudo apt autoremove -y"
    - name: Reboot
      when: "allow_reboot"
      reboot:
        msg: "rebooting"
    - import_tasks: ./install_xorg_headless_virtual_display.yaml  # retry once again


# we must run glmark2 as non-root user and without sudo. With sudo, its FPS only 60-70.
# Without sudo, its FPS is about 600-700. Presumably due to additional security checks overhead in sudo/root user.
- name: "create `glmark2_benchmark` user if not exists"
  ansible.builtin.user:
    name: glmark2_benchmark

#- name: "check if `glmark2_benchmark` user already exists"
#  command: "id -u glmark2_benchmark"
#  register: "check_user_exists"
#  failed_when: false
#- name: "create `glmark2_benchmark` user if not exists"
#  command: "useradd glmark2_benchmark"
#  when: "check_user_exists.rc != 0"


- name: "install libpng16-16"
  apt:
    update_cache: yes
    name:
      - libpng16-16

- set_fact:
    nvidia_track_py_script: "{{ base_path }}/nvidia-smi-track.py"
  when: "nvidia_track_py_script is undefined"


- name: make sure no other instance of nvidia-smi-track is running
  become: true
  shell: >-
    pgrep -fi nvidia-smi-track | xargs --no-run-if-empty kill


- name: Start nvidia-smi-track.py for Glmark2
  become: true
  shell: >-
    {{ nvidia_track_py_script }} START "{{base_path}}/track_result_nvidia_smi_glmark2.txt"
  async: 10000
  poll: 0


# `sudo ./prime-run env DISPLAY=:1 glmark2`
- name: run Xvfb Display Server
  shell: >-
    nohup Xvfb :1122 2>&1 | tee /home/root/xvfb_nohup.log &
  become: true


- name: Perform Glmark2 benchmark
  include_tasks: ./benchmark_glmark2_loop_body.yaml
  loop: "{{ ['1920x1080', '1366x768', '360x800', '192x108'] }}"
  loop_control:
    loop_var: benchmark_resolution

- name: Stop nvidia-smi-track.py for Glmark2
  shell: >-
    {{ nvidia_track_py_script }} STOP "{{base_path}}/track_result_nvidia_smi_glmark2.txt"
  register: result

- name: "write nvidia-smi-track.py for Glmark2"
  delegate_to: localhost
  copy:
    content: "{{ result.stdout }}"
    dest: "{{benchmark_result_folder}}/nvidia_smi_glmark2.txt"

- name: make sure no other instance of glmark2 is running
  become: true
  shell: >-
    pgrep -i GLMARK | grep -v ^$$\$  | xargs --no-run-if-empty kill

