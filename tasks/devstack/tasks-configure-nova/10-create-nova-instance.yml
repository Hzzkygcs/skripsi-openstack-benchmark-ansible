- when: is_controller
  block:
    - set_fact:
        nova_instance_name: "gpu-benchmark"

    - name: "get information about Private Network ID"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack subnet list --name private-subnet --column Network --format value
      register: private_network_id
    - name: "get information about Public Network ID"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack subnet list --name public-subnet --column Network --format value
      register: public_network_id

    - name: "check if the nova instance already exists"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack server list --name {{nova_instance_name}} --status ACTIVE --format json
      register: list_of_specified_nova_instances

    - set_fact:
        private_network_id: "{{ private_network_id.stdout }}"
        public_network_id: "{{ public_network_id.stdout }}"
        length_of_specified_nova_instances: "{{list_of_specified_nova_instances.stdout | from_json | length}}"
    - set_fact:
        specified_nova_instance_already_exists: "{{length_of_specified_nova_instances| int != 0 }}"
    - debug:
        var: list_of_specified_nova_instances
    - debug:
        var: specified_nova_instance_already_exists

    - name: "Create a Nova instance in project \"demo\""
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack server create --flavor m1.small --image Ubuntu2004 --nic net-id={{private_network_id}} 
        --security-group {{security_group_id}} --key-name created_by_ansible {{nova_instance_name}}
      when: "not specified_nova_instance_already_exists"

    - name: "Get information about existing floating IP"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack floating ip list --status DOWN --format json
      register: existing_floating_ips

    - set_fact:
        number_of_available_floating_ip: "{{existing_floating_ips.stdout | from_json | length}}"
    - debug:
        var: existing_floating_ips.stdout
    - debug:
        var: number_of_available_floating_ip

    - when: "number_of_available_floating_ip | int < 1"
      block:
        - name: "Create a new random floating ip"
          shell: >-
            {{ source_admin_openrc_cmd }} 
            openstack floating ip create {{public_network_id}}
    #        - name: "Get IP address of a new floating-ip"
    #          script:
    #            cmd: "../data/ip_calculator.py {{devstack_floating_ip_range}} 3"
    #          register: new_floating_ip_address
    #        - name: "Get IP address of a new floating-ip 2"
    #          script:
    #            cmd: "../data/ip_calculator.py {{devstack_floating_ip_range}} 4"
    #          register: new_floating_ip_address_2
    #        - set_fact:
    #            new_floating_ip_address: "{{ new_floating_ip_address.stdout | from_json }}"
    #            new_floating_ip_address_2: "{{ new_floating_ip_address_2.stdout | from_json }}"
    #        - fail:
    #            msg: "Subnet too small: devstack_floating_ip_range {{devstack_floating_ip_range}}. Please set it with size of 8"
    #          when: "new_floating_ip_address['different_subnet'] or new_floating_ip_address_2['different_subnet']"
    #        - set_fact:
    #            new_floating_ip_address: "{{ new_floating_ip_address['resulting_ip'] }}"
    #            new_floating_ip_address_2: "{{ new_floating_ip_address_2['resulting_ip'] }}"
    #        - name: "Create a new floating ip"
    #          shell: >-
    #            {{ source_admin_openrc_cmd }}
    #            openstack floating ip create {{public_network_id}} --floating-ip-address {{new_floating_ip_address}}
    #          register: result
    #          changed_when: "'already allocated' not in result.stderr"
    #          failed_when: "result.rc !=0 and 'already allocated' not in result.stderr"

    - name: "Get information about existing floating IP"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack floating ip list --status DOWN --format json
      register: existing_floating_ips

    - set_fact:
        existing_floating_ip: "{{existing_floating_ips.stdout | from_json}}"
    - debug:
        var: existing_floating_ip
    - assert:
        that:
          - "(existing_floating_ip | length | int) > 0"
    - set_fact:
        choosen_floating_ip: "{{ existing_floating_ip[0]['Floating IP Address'] }}"
    - debug:
        var: choosen_floating_ip
    - name: "Associate gpu-benchmark instance with a floating-ip"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack server add floating ip gpu-benchmark {{ choosen_floating_ip }}
      register: result
      failed_when: "result.rc != 0 and 'already has a floating IP' not in result.stderr"
      changed_when: "'already has a floating IP' not in result.stderr"