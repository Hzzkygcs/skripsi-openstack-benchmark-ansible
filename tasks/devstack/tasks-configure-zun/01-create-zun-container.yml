- when: is_controller
  block:
    - set_fact:
        zun_container_name: "gpu-benchmark"

    - name: "get information about Private Network ID"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack subnet list --name private-subnet --column Network --format value
      register: private_network_id
    - name: "get information about Public Network ID"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack subnet list --name public-subnet --column Network --format value
      register: public_network_id
    - name: "get information about Security Group ID"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack security group list --format json
      register: security_group_list

    - name: "check if the zun container already exists"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack appcontainer list --name {{zun_container_name}} --format json
      register: list_of_specified_zun_containers

    - set_fact:
        private_network_id: "{{ private_network_id.stdout }}"
        public_network_id: "{{ public_network_id.stdout }}"
        length_of_specified_zun_containers: "{{list_of_specified_zun_containers.stdout | from_json | length}}"
    - set_fact:
        specified_zun_container_already_exists: "{{length_of_specified_zun_containers| int != 0 }}"
    - debug:
        var: list_of_specified_zun_containers
    - debug:
        var: specified_zun_container_already_exists

    - name: "Create Dockerfile for the Zun container"
      copy:
        content: |
          FROM ubuntu:latest

          RUN apt-get update && apt-get install -y openssh-server
          RUN mkdir /var/run/sshd
          RUN echo 'root:1122' | chpasswd
          # SSH login fix. Otherwise user is kicked off after login
          RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd
          EXPOSE 22
          # Start SSH server
          CMD ["/usr/sbin/sshd", "-D"]
        dest: /tmp/Dockerfile
      when: "not specified_zun_container_already_exists"

    - name: "Build the Zun container"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack image create --file /tmp/Dockerfile --public --disk-format raw --container-format docker ssh_on_docker
      when: "not specified_zun_container_already_exists"

    - name: "Create a Zun container in project \"demo\""
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack appcontainer create --name {{zun_container_name}} --image-driver glance --net network={{private_network_id}} --interactive --memory 512 --cpu 1 --security-group {{security_group_id}} ssh_on_docker
      when: "not specified_zun_container_already_exists"

    - name: "Get information about existing floating IP"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack floating ip list --status DOWN --format json
      register: existing_floating_ips

    - set_fact:
        number_of_available_floating_ip: "{{existing_floating_ips.stdout | from_json | length}}"
    - debug:
        var: existing_floating_ips.stdout
    - debug:
        var: number_of_available_floating_ip  

    - when: "number_of_available_floating_ip | int < 1"
      block:
        - name: "Create a new random floating ip"
          shell: >-
            {{ source_admin_openrc_cmd }} 
            openstack floating ip create {{public_network_id}}
            
    - name: "Get information about existing floating IP"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack floating ip list --status DOWN --format json
      register: existing_floating_ips

    - set_fact:
        existing_floating_ip: "{{existing_floating_ips.stdout | from_json}}"
    - debug:
        var: existing_floating_ip
    - assert:
        that:
          - "(existing_floating_ip | length | int) > 0"
    - set_fact:
        chosen_floating_ip: "{{ existing_floating_ip[0]['Floating IP Address'] }}"
    - debug:
        var: chosen_floating_ip
    - name: "Associate the floating IP with the Zun container"
      shell: >-
        {{ source_admin_openrc_cmd }} 
        openstack appcontainer add floating ip {{zun_container_name}} {{chosen_floating_ip}}
      register: result
      failed_when: "result.rc != 0 and 'already allocated' not in result.stderr"
      changed_when: "'already has a floating ip' not in result.stderr"