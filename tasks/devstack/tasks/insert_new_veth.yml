- name: "Calculate CIDR for veth_inside"
  script:
    cmd: "../data/ip_calculator.py {{ devstack_floating_ip_range }} 1"
  register: "cidr_veth_inside"
  delegate_to: "localhost"  # to increase performance
- name: "Calculate CIDR for veth_outside"
  script:
    cmd: "../data/ip_calculator.py {{ devstack_floating_ip_range }} 2"
  register: "cidr_veth_outside"
  delegate_to: "localhost"  # to increase performance
- set_fact:
    cidr_veth_inside: "{{ cidr_veth_inside.stdout | from_json }}"
    cidr_veth_outside: "{{ cidr_veth_outside.stdout | from_json }}"

- debug:
    var: cidr_veth_inside
- debug:
    var: cidr_veth_outside


- name: "Create a virtual Ethernet pair"
  command: "sudo ip link add veth_outside type veth peer name veth_inside"
  become: true
  register: result
  failed_when: "result.rc != 0 and 'File exists' not in result.stderr"
  changed_when: "'File exists' not in result.stderr"

- name: "Attach subnet to the veth_inside"
  command: "sudo ip addr add {{ cidr_veth_inside['result'] }} dev veth_inside"
  become: true
  register: result
  failed_when: "result.rc != 0 and 'File exists' not in result.stderr"
  changed_when: "'File exists' not in result.stderr"

- name: "Activate veth_inside"
  command: "sudo ip link set veth_inside up"
  become: true


- name: "Attach subnet to the veth_outside"
  command: "sudo ip addr add {{ cidr_veth_outside['result'] }} dev veth_outside"
  become: true
  register: result
  failed_when: "result.rc != 0 and 'File exists' not in result.stderr"
  changed_when: "'File exists' not in result.stderr"

- name: "Activate veth_outside"
  command: "sudo ip link set veth_outside up"
  become: true

# These two commands below significantly help to give Internet access to the Nova instances.
# But remember, you still need to associate the instance with a floating-IP first. Because it's the floating IP
# that will deliver your requests to the Internet.
- name: "Enable IP forwarding"
  command: "sudo sysctl -w net.ipv4.ip_forward=1"
  become_user: root
- name: "Enable NAT routing"
  command: "sudo iptables -t nat -A POSTROUTING -o {{ interface_1 }} -j MASQUERADE"
  become: true

  
  # Step 7: Configure the default route in the network namespace
#sudo ip netns exec my_namespace ip route add default via 192.168.1.2
