---
# tasks file for local_script_on_remote
- fail:
    msg: "Argument '{{ item }}' is not specified, but it's mandatory"
  when: "lookup('vars', item) == ''"
  with_list:
    - local_dir
    - local_script_name

- set_fact:
    is_local_dir_ending_with_slash: "{{ local_dir.endswith('/') | bool }}"
    is_remote_script_dir_ending_with_slash: "{{ remote_script_dir.endswith('/') | bool }}"

- name: Append "/" if local_dir doesn't end with "/"
  set_fact:
    local_dir: "{{ local_dir }}/"
  when: not is_local_dir_ending_with_slash
- name: Append "/" if remote_script doesn't end with "/"
  set_fact:
    remote_script_dir: "{{ remote_script_dir }}/"
  when: not is_remote_script_dir_ending_with_slash


- name: Read script content
  delegate_to: localhost
  slurp:
    src: "{{ local_dir }}{{ local_script_name }}"
  register: local_file_content

- name: Replace windows-based line-separator to linux-based separator in memory
  set_fact:
    local_file_content_linux: "{{ local_file_content.content | b64decode | regex_replace('\\r\\n', '\\n') }}"
  when: convert_windows_based_line_separator_to_linux_based


- name: Create parent directories if not exists
  file:
    path: "{{ remote_script_dir }}"
    state: directory
    recurse: yes
    mode: "0777"


- name: write script to the remote
  become: "{{ become }}"
  copy:
    content: "{{ local_file_content_linux }}"
    dest: "{{ remote_script_dir }}{{ local_script_name }}"
    mode: "0777"

- name: run the script
  become: "{{ become }}"
  command: "\"{{ remote_script_dir }}{{ local_script_name }}\" {{ arguments }}"
